import { NativeModules } from 'react-native';

type KktModuleType = {
  destroy(): void;
  logWrite(p0: string, p1: number, p2: string): Promise<number>;
  version(): Promise<string>;
  setSettings(string: string): Promise<number>;
  setSingleSetting(key: string, value: string): void;
  applySingleSettings(): Promise<number>;
  getSettings(): Promise<string>;
  getSingleSetting(key: string): Promise<string>;
  errorCode(): Promise<number>;
  errorDescription(): Promise<string>;
  resetError(): void;
  setParamInt(key: number, value: number): void;
  setParamBoolean(key: number, value: boolean): void;
  setParamLong(key: number, value: bigint): void;
  setParamString(key: number, value: string): void;
  setParamDate(key: number, value: Date): void;
  setNonPrintableParamBoolean(key: number, value: boolean): void;
  setNonPrintableParamInt(key: number, value: boolean): void;
  setNonPrintableParamLong(key: number, value: number): void;
  setNonPrintableParamString(key: number, value: number): void;
  eetNonPrintableParamDate(key: number, value: number): void;
  setUserParamBoolean(key: number, value: number): void;
  setUserParamInt(key: number, value: number): void;
  setUserParamString(key: number, value: number): void;
  setUserParamDate(key: number, value: number): void;
  utilFormTlv(): Promise<number>;
  utilFormNomenclature(): Promise<number>;
  utilMapping(): Promise<number>;
  readModelFlags(): Promise<number>;
  lineFeed(): Promise<number>;
  flashFirmware(): Promise<number>;
  softLockInit(): Promise<number>;
  softLockQuerySessionCode(): Promise<number>;
  softLockValidate(): Promise<number>;
  utilCalcTax(): Promise<number>;
  downloadPicture(): Promise<number>;
  bluetoothRemovePairedDevices(): Promise<number>;
  utilTagInfo(): Promise<number>;
  utilContainerVersions(): Promise<number>;
  activateLicenses(): Promise<number>;
  removeLicenses(): Promise<number>;
  enterKeys(): Promise<number>;
  validateKeys(): Promise<number>;
  enterSerialNumber(): Promise<number>;
  getSerialNumberRequest(): Promise<number>;
  uploadPixelBuffer(): Promise<number>;
  downloadPixelBuffer(): Promise<number>;
  printPixelBuffer(): Promise<number>;
  utilConvertTagValue(): Promise<number>;
  parseMarkingCode(): Promise<number>;
  callScript(): Promise<number>;
  setHeaderLines(): Promise<number>;
  setFooterLines(): Promise<number>;
  uploadPictureCliche(): Promise<number>;
  uploadPictureMemory(): Promise<number>;
  uploadPixelBufferCliche(): Promise<number>;
  uploadPixelBufferMemory(): Promise<number>;
  execDriverScript(): Promise<number>;
  uploadDriverScript(): Promise<number>;
  execDriverScriptById(): Promise<number>;
  writeUniversalCountersSettings(): Promise<number>;
  readUniversalCountersSettings(): Promise<number>;
  queryUniversalCountersState(): Promise<number>;
  resetUniversalCounters(): Promise<number>;
  cacheUniversalCounters(): Promise<number>;
  readUniversalCounterSum(): Promise<number>;
  readUniversalCounterQuantity(): Promise<number>;
  clearUniversalCountersCache(): Promise<number>;
  disableOfdChannel(): Promise<number>;
  enableOfdChannel(): Promise<number>;
  validateJson(): Promise<number>;
  reflectionCall(): Promise<number>;
  getRemoteServerInfo(): Promise<number>;
  getParamByteArray(value: number): Promise<[]>;
  getParamInt(key: number): Promise<number>;
  getParamString(key: number): Promise<string>;
  getParamDouble(key: number): Promise<number>;
  getParamBool(key: number): Promise<boolean>;
  getParamDateTime(key: number): Promise<Date>;
  printText(): Promise<number>;
  printCliche(): Promise<number>;
  beginNonfiscalDocument(): Promise<number>;
  endNonfiscalDocument(): Promise<number>;
  printBarcode(): Promise<number>;
  printPicture(): Promise<number>;
  printPictureByNumber(): Promise<number>;
  uploadPictureFromFile(): Promise<number>;
  clearPictures(): Promise<number>;
  writeDeviceSettingRaw(): Promise<number>;
  readDeviceSettingRaw(): Promise<number>;
  commitSettings(): Promise<number>;
  initSettings(): Promise<number>;
  resetSettings(): Promise<number>;
  writeDateTime(): Promise<number>;
  writeLicense(): Promise<number>;
  fnOperation(): Promise<number>;
  fnQueryData(): Promise<number>;
  fnWriteAttributes(): Promise<number>;
  externalDevicePowerOn(): Promise<number>;
  externalDevicePowerOff(): Promise<number>;
  externalDeviceWriteData(): Promise<number>;
  externalDeviceReadData(): Promise<number>;
  operatorLogin(): Promise<number>;
  processJson(): Promise<number>;
  readDeviceSetting(): Promise<number>;
  writeDeviceSetting(): Promise<number>;
  beginReadRecords(): Promise<number>;
  readNextRecord(): Promise<number>;
  endReadRecords(): Promise<number>;
  userMemoryOperation(): Promise<number>;
  continuePrint(): Promise<number>;
  initMgm(): Promise<number>;
  open(): Promise<number>;
  isOpened(): Promise<boolean>;
  close(): Promise<number>;
  resetParams(): Promise<number>;
  runCommand(): Promise<number>;
  beep(): Promise<number>;
  openDrawer(): Promise<number>;
  cut(): Promise<number>;
  devicePoweroff(): Promise<number>;
  deviceReboot(): Promise<number>;
  openShift(): Promise<number>;
  resetSummary(): Promise<number>;
  initDevice(): Promise<number>;
  queryData(): Promise<number>;
  cashIncome(): Promise<number>;
  cashOutcome(): Promise<number>;
  openReceipt(): Promise<number>;
  cancelReceipt(): Promise<number>;
  closeReceipt(): Promise<number>;
  checkDocumentClosed(): Promise<number>;
  receiptTotal(): Promise<number>;
  receiptTax(): Promise<number>;
  registration(): Promise<number>;
  payment(): Promise<number>;
  report(): Promise<number>;
};

const { KktModule } = NativeModules;

export default KktModule as KktModuleType;
